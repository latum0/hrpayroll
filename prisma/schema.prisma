generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum NotificationStatus {
  SENT
  FAILED
  READ
  QUEUED
}

enum AbsenceType {
  SICK
  UNPAID
}

enum LeaveRequestType {
  VACATION
  SICK
  UNPAID
  OTHER
}

enum LeaveRequestStatus {
  APPROVED
  PENDING
  REJECTED
  CANCELLED
}

enum PaymentBatchEntryStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentBatchStatus {
  PREPARED
  SUBMITTED
  SETTLED
  FAILED
}

enum SideType {
  EMPLOYEE
  EMPLOYER
}

enum PayrollStatus {
  DRAFT
  PREVIEW
  APPROVED
  PAID
  ARCHIVED
}

enum ComponentType {
  EARNING
  EMPLOYER_CONTRIBUTION
  DEDUCTION
}

enum SalaryComponentCode {
  LOAN
  TAX
  TRANSPORT
  BASE
}

enum ContractStatus {
  ACTIVE
  PENDING
  ENDED
}

enum DocumentType {
  CONTRACT
  PAYSLIP
}

enum EmployeeStatus {
  ONBOARDING
  ACTIVE
  ON_LEAVE
  OFFBOARDING
  TERMINATED
}

enum BillStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

enum Payfreq {
  MONTHLY
  WEEKLY
  BIWEEKLY
}

enum PayType {
  HOURLY
  SALARY
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  users           Users[]
  rolePermissions RolePermission[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int

  @@id([roleId, permissionId])
}

model UserPermission {
  user         Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int

  @@id([userId, permissionId])
}

model Users {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  firstName       String           @default("Unknown")
  lastName        String           @default("Unknown")
  role            Role             @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId          Int              @default(1)
  userPermissions UserPermission[]

  phone             String?    @unique
  refreshToken      String?
  emailVerified     Boolean    @default(false)
  verificationToken String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  status            UserStatus @default(PENDING)

  employee Employee? @relation(name: "UserToEmployee")

  historiques  Historique[]
  Document     Document[]
  PayrollLine  PayrollLine[]
  PaymentBatch PaymentBatch[]
  Attendance   Attendance[]

  LeaveRequestRequested LeaveRequest[] @relation("LeaveRequestedBy")
  LeaveRequestApproved  LeaveRequest[] @relation("LeaveApprovedBy")

  payrollRunsManaged PayrollRun[] @relation("PayrollRunManagedBy")

  Notification Notification[]
}

model Employee {
  id   Int    @id
  user Users? @relation(name: "UserToEmployee", fields: [id], references: [id], onDelete: Cascade)

  dob             DateTime?
  nationalId      String?
  taxId           String?
  jobTitle        String?
  hireDate        DateTime?
  terminationDate DateTime?
  status          EmployeeStatus @default(ONBOARDING)
  managerId       Int? // self-relation to another Employee
  manager         Employee?      @relation("EmployeeManager", fields: [managerId], references: [id], onDelete: SetNull)
  directReports   Employee[]     @relation("EmployeeManager")

  bankAccounts  EmployeeBankAccount[]
  contracts     EmploymentContract[]
  payslips      Payslip[]
  leaveRequests LeaveRequest[]
  attendance    Attendance[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  departmentId      Int
  department        Department          @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  PaymentBatchEntry PaymentBatchEntry[]
  Absence           Absence[]
  Document          Document[]
  Notification      Notification[]
}

model Historique {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  createdAt DateTime @default(now())
  acteur    String
}

model Document {
  id Int @id @default(autoincrement())

  userId Int?
  user   Users? @relation(fields: [userId], references: [id], onDelete: Cascade)

  payslipId Int?     @unique
  payslip   Payslip? @relation("DocumentToPayslip", fields: [payslipId], references: [id], onDelete: SetNull)

  contractId Int?                @unique
  contract   EmploymentContract? @relation("DocumentToEmploymentContract", fields: [contractId], references: [id], onDelete: SetNull)

  employeeId Int?
  Employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)

  type      DocumentType
  fileName  String
  mimeType  String?
  fileKey   String
  isPublic  Boolean      @default(false)
  createdAt DateTime     @default(now())

  @@index([userId])
}

model EmployeeBankAccount {
  id                Int                 @id @default(autoincrement())
  employeeId        Int
  employee          Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  accountHolderName String?
  iban              String // ENCRYPT before storing in DB or use field-level encryption
  bic               String?
  bankName          String?
  isPrimary         Boolean             @default(false)
  verified          Boolean             @default(false)
  verifiedAt        DateTime?
  createdAt         DateTime            @default(now())
  PaymentBatchEntry PaymentBatchEntry[]

  @@index([employeeId])
}

model Department {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  employees   Employee[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LeaveRequest LeaveRequest[]
}

model EmploymentContract {
  id           Int            @id @default(autoincrement())
  employeeId   Int
  employee     Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  title        String?
  startDate    DateTime
  endDate      DateTime?
  payFrequency Payfreq        @default(MONTHLY)
  payType      PayType        @default(SALARY)
  status       ContractStatus @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt

  contractSalaryComponents ContractSalaryComponent[]
  payslips                 Payslip[]

  document Document? @relation("DocumentToEmploymentContract")

  @@index([employeeId])
  @@index([employeeId, startDate])
}

model SalaryComponent {
  id            Int                 @id @default(autoincrement())
  code          SalaryComponentCode
  name          String
  description   String?
  componentType ComponentType
  taxable       Boolean             @default(true)
  employerPaid  Boolean             @default(false)
  defaultAmount Decimal? // if static
  capAmount     Decimal? // maximum
  glAccount     String? // for accounting mapping
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  contractLinks ContractSalaryComponent[]
  payrollLines  PayrollLine[]

  @@index([code])
}

model ContractSalaryComponent {
  id                Int                @id @default(autoincrement())
  contractId        Int
  contract          EmploymentContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  salaryComponentId Int
  salaryComponent   SalaryComponent    @relation(fields: [salaryComponentId], references: [id], onDelete: Cascade)
  amount            Decimal?
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())

  @@index([contractId])
  @@index([salaryComponentId])
}

model PayrollRun {
  id          Int           @id @default(autoincrement())
  periodStart DateTime
  periodEnd   DateTime
  status      PayrollStatus @default(DRAFT)

  managedById Int
  managedBy   Users @relation("PayrollRunManagedBy", fields: [managedById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  totalGross           Decimal?
  totalTax             Decimal?
  totalNet             Decimal?
  totalEmployerContrib Decimal?

  payslips       Payslip[]
  paymentBatches PaymentBatch[]

  PayrollJournal PayrollJournal[]
  Attendance     Attendance[]
  LeaveRequest   LeaveRequest[]
  Absence        Absence[]

  @@index([periodStart, periodEnd])
}

model Payslip {
  id           Int        @id @default(autoincrement())
  payrollRunId Int
  payrollRun   PayrollRun @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  employeeId   Int
  employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  employmentContractId Int?
  employmentContract   EmploymentContract? @relation(fields: [employmentContractId], references: [id], onDelete: SetNull)

  grossAmount      Decimal
  taxAmount        Decimal
  deductionsAmount Decimal
  netAmount        Decimal
  status           PayrollStatus @default(DRAFT)

  document Document? @relation("DocumentToPayslip")

  createdAt DateTime  @default(now())
  paidAt    DateTime?

  payrollLines PayrollLine[]
  Notification Notification[]

  @@index([payrollRunId])
  @@index([employeeId])
}

model PayrollLine {
  id                Int             @id @default(autoincrement())
  payslipId         Int
  payslip           Payslip         @relation(fields: [payslipId], references: [id], onDelete: Cascade)
  salaryComponentId Int
  salaryComponent   SalaryComponent @relation(fields: [salaryComponentId], references: [id], onDelete: Cascade)

  description String?
  amount      Decimal
  taxable     Boolean  @default(true)
  side        SideType @default(EMPLOYEE)
  createdById Int?
  createdBy   Users?   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@index([payslipId])
  @@index([salaryComponentId])
}

model PaymentBatch {
  id           Int                @id @default(autoincrement())
  payrollRunId Int
  payrollRun   PayrollRun         @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  provider     String // "bank_x", "payroll_provider"
  fileUrl      String? // encrypted location of prepared file
  status       PaymentBatchStatus @default(PREPARED)
  totalAmount  Decimal?
  entriesCount Int                @default(0)
  createdById  Int?
  createdBy    Users?             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt    DateTime           @default(now())

  entries PaymentBatchEntry[]

  @@index([payrollRunId])
}

model PaymentBatchEntry {
  id                    Int                     @id @default(autoincrement())
  paymentBatchId        Int
  paymentBatch          PaymentBatch            @relation(fields: [paymentBatchId], references: [id], onDelete: Cascade)
  employeeId            Int
  employee              Employee                @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeBankAccountId Int?
  employeeBankAccount   EmployeeBankAccount?    @relation(fields: [employeeBankAccountId], references: [id], onDelete: SetNull)
  amount                Decimal
  reference             String?
  status                PaymentBatchEntryStatus @default(PENDING)
  createdAt             DateTime                @default(now())

  @@index([paymentBatchId])
  @@index([employeeId])
}

model PayrollJournal {
  id           Int        @id @default(autoincrement())
  payrollRunId Int
  payrollRun   PayrollRun @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  entryDate    DateTime   @default(now())
  accountCode  String
  description  String?
  debit        Decimal    @default(0)
  credit       Decimal    @default(0)
  createdAt    DateTime   @default(now())
  exportedAt   DateTime?
  externalId   String?

  @@index([payrollRunId])
}

model Attendance {
  id            Int         @id @default(autoincrement())
  employeeId    Int
  employee      Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  checkIn       DateTime
  checkOut      DateTime?
  validatedById Int?
  validatedBy   Users?      @relation(fields: [validatedById], references: [id], onDelete: Cascade)
  note          String?
  createdAt     DateTime    @default(now())
  PayrollRun    PayrollRun? @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  payrollRunId  Int?

  @@index([employeeId, checkIn])
}

model LeaveRequest {
  id           Int                @id @default(autoincrement())
  employeeId   Int
  employee     Employee           @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  departmentId Int?
  department   Department?        @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  startDate    DateTime
  endDate      DateTime
  type         LeaveRequestType
  days         Float?
  status       LeaveRequestStatus @default(PENDING)

  // who requested (optional)
  requestedById Int?
  requestedBy   Users? @relation("LeaveRequestedBy", fields: [requestedById], references: [id], onDelete: Cascade)

  // who approved (optional)
  approvedById Int?
  approvedBy   Users? @relation("LeaveApprovedBy", fields: [approvedById], references: [id], onDelete: Cascade)

  reason      String?
  payrollNote String?
  createdAt   DateTime  @default(now())
  approvedAt  DateTime?

  Absence Absence[]

  PayrollRun   PayrollRun? @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  payrollRunId Int?

  @@index([employeeId])
  @@index([departmentId])
  @@index([status])
}

model Absence {
  id             Int           @id @default(autoincrement())
  employeeId     Int
  employee       Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date           DateTime
  type           AbsenceType?
  hours          Float?
  leaveRequestId Int?
  leaveRequest   LeaveRequest? @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade)
  reason         String?
  createdAt      DateTime      @default(now())
  PayrollRun     PayrollRun?   @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)
  payrollRunId   Int?

  @@index([employeeId, date])
}

model Notification {
  id         Int                @id @default(autoincrement())
  userId     Int
  user       Users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String // "payslip_ready", "leave_approved", etc
  channel    String // "email" | "sms" | "push"
  template   String?
  payload    Json? // rendered content or data
  status     NotificationStatus @default(QUEUED)
  error      String?
  createdAt  DateTime           @default(now())
  Employee   Employee?          @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  employeeId Int?
  Payslip    Payslip?           @relation(fields: [payslipId], references: [id], onDelete: SetNull)
  payslipId  Int?

  @@index([userId])
  @@index([status])
}
